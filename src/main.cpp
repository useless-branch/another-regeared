//
// Created by patrick on 6/14/22.
//
#include "bitmap_image.hpp"

#include <CLI/CLI.hpp>
#include <cassert>
#include <cstddef>
#include <fmt/format.h>
#include <iostream>
#include <string>

std::uint16_t RGBto2Byte(std::uint8_t red, std::uint8_t green, std::uint8_t blue) {
    auto          lerp = [](float a, float b, float t) { return a + t * (b - a); };
    std::uint8_t R    = static_cast<std::uint8_t>(lerp(0.0, 31.0, red / 255.0));
    std::uint8_t G    = static_cast<std::uint8_t>(lerp(0.0, 63.0, green / 255.0));
    std::uint8_t B    = static_cast<std::uint8_t>(lerp(0.0, 31.0, blue / 255.0));
    std::uint8_t upper = (R << 3) bitor (G >> 3);
    std::uint8_t lower = (G << 5) bitor (B bitand 0b11111);
    return static_cast<std::uint16_t>(lower << 8 bitor upper);
}

int main(int argc, char const* const* argv) {
    CLI::App app{"anotherRegeared Image2Header-Generator"};

    std::string inputFileName;
    std::string outputFileName{"a.hpp"};
    std::string arrayName{"var"};

    app.add_option("-i,--input", inputFileName, "Input Image. Must be *.bmp!")
      ->required()
      ->check(CLI::ExistingFile);
    app.add_option("-o,--output", outputFileName, "Input Filename. Default: a.hpp");
    app.add_option("-n,--name", arrayName, "Name of the generated array. Default: var");

    CLI11_PARSE(app, argc, argv);

    fmt::print("Opening image...");
    bitmap_image image{inputFileName};
    if(!image) {
        fmt::print("Abort! Wrong image format!");
        return -1;
    }

    const std::size_t height{image.height()};
    const std::size_t width{image.width()};

    std::vector<std::uint16_t> outputBuffer{};
    outputBuffer.resize(height * width);

    for(std::size_t h{}; h < height; ++h) {
        for(std::size_t w{}; w < width; ++w) {
            rgb_t color;
            image.get_pixel(w, h, color);
            static std::size_t i{};
            outputBuffer[i] = RGBto2Byte(color.red, color.green, color.green);
            ++i;
        }
    }

    fmt::print("Opening output file...");
    std::ofstream outputFile{outputFileName, std::ios::trunc};
    if(!outputFile.is_open()) {
        fmt::print("Failed to open header! Abort!\n");
        return -1;
    }
    auto HPPHeader = fmt::format(
      "//\n//Image header generated by anotherRegeared\n//\n\n#pragma once\n"
      "#include<array>\n#include<cstddef>\n\n");
    auto variableArray = fmt::format(
      "constexpr std::array<{},{}>{}{{\n{:#x}\n}};",
      "std::uint16_t",
      width * height,
      arrayName,
      fmt::join(outputBuffer, ", "));
    outputFile << HPPHeader;
    outputFile << variableArray;
    return 0;
}